public static TablesSerachResult GetTableData(SearchOptions searchOptions,DeclarationConfiguration_Test2Entities ctx) {
            var data = ctx.TableNamesLookups.Where(t => t.DeclarationNumber == searchOptions.ReportNumber && t.DeclarationYear == searchOptions.Year).ToList();
            var declarationVersionId = ctx.DeclarationVersions.Where(d => d.Year == searchOptions.Year && d.DeclarationNumber == searchOptions.ReportNumber).Select(d => d.Id).FirstOrDefault();
            if (!searchOptions.Search.IsEmpty())
            {
                data = data.Where(f => f.TableNameArabic.Contains(searchOptions.Search)).ToList();
            }
            List<TableValidationVm> tableValidations = new List<TableValidationVm>();
            foreach (var item in data)
            {
                List<TableColumnVm> cols = new List<TableColumnVm>();
                tableValidations.Add(new TableValidationVm {
                    DeclarationVersion = declarationVersionId.ToString() ,
                    TableNameArabic = item.TableNameArabic,
                    Year = item.DeclarationYear,
                    DeclarationNumber = item.DeclarationNumber,
                    Validators = ctx.TableValidators.Where(t=>t.DeclarationVersionID == declarationVersionId && t.ColumnName== null && t.TableName == item.TableNameEnglish).Include(v => v.PDFValidator).ToList().Select(v=> Mapper.Map<TableValidatorVM>(v)).ToList(),
                    Columns = GetTableColumn(item, ctx)
            });
            }
            var pageIndex = searchOptions.Pagination.PageIndex;
            var pageSize = searchOptions.Pagination.pageSize;

            var searchResult = new TablesSerachResult
            {
                pagination = searchOptions.Pagination
            };
            searchResult.pagination.length = data.Count();
            searchResult.pagination.PageIndex = pageIndex > (int)Math.Ceiling(data.Count() / (double)pageSize) ? 0 : pageIndex;
            searchResult.pagination.pageSize = pageSize;
            searchResult.pagination.totalPages = (int)Math.Ceiling(data.Count() / (double)pageSize);
            searchResult.Tables = tableValidations.Skip((pageIndex) * pageSize).Take(pageSize).ToList();

            return searchResult;
        }

backend
sing System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace LoginAPI.Models.ViewModels
{
    public class SearchOptions
    {
        public int Year { get; set; }
        public string ReportNumber { get; set; }
        public String GridType { get; set; }
        public PaginationVm Pagination { get; set; }
        public String Search { get; set; }
        public Filter Filter { get; set; }
    }
}
==============================================================================================2
Angular

search: SearchOptions;
loadTables(event) {
    if(this.searchFlag){
    this.loading = true;
    this.pageNumber = Math.ceil((event.first + 1) / event.rows);
    this.search.pagination.pageIndex = Math.ceil((event?.first + 1) / event?.rows) - 1;
    this.search.pagination.pageSize = event?.rows;
    this.gridService.page(this.search).subscribe(
      res => {
        this.loading = false;
        this.tables = res.Tables,
          this.totalRecords = res.pagination.length;
      },
      (err) => {
        console.log(err);
        this.notification.error('الرجاء التحقق من اتصالك بالانترنت');
      });
    }
  }

===============================================================================
Angular
import { Filters } from './filters';
import { Pagination } from './pagination';

export class SearchOptions {
  filter: Filters;
  pagination: Pagination;
  year: string;
  reportNumber: string;
  gridType: string;
  search: string;
  constructor() {
    this.filter = new Filters();
    this.pagination = new Pagination();
  }
}